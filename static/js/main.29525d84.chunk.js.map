{"version":3,"sources":["components/Button/Button.js","components/Sort/Sort.js","components/Task/Task.js","App.js","serviceWorker.js","index.js"],"names":["Button","Component","onClick","className","children","Task","tasks","deleteTask","editTask","taskComplete","updateTask","saveTask","value","taskType","onTypeChange","taskTime","taskPeriod","durationType","taskDurationType","error","cancelEdit","map","item","key","taskID","isUpdating","isComplete","type","onChange","task","maxLength","disable","duration","App","props","state","updatedTask","bind","addTask","id","this","setState","filter","prevState","errorCheck","forEach","element","alert","taskDuration","curTasks","newTask","length","e","target","Number","isInteger","parseInt","typeCheck","updatedTasks","select","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.29525d84.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Button.css\";\r\n\r\nconst Button = ({ onClick, className = \"\", children }) => (\r\n  <span onClick={onClick} className={className}>\r\n    {children}\r\n  </span>\r\n);\r\n\r\nexport default Button;\r\n","import React, { Component } from \"react\";\r\nimport \"./Sort.css\";\r\n\r\nclass Sort extends Component {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  // }\r\n  render() {\r\n    return (\r\n      <div className=\"Sort\">\r\n        <div className=\"list-wrapper\">\r\n          <h1> To-Do List </h1>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sort;\r\n","import React, { Component } from \"react\";\r\nimport \"./Task.css\";\r\nimport Button from \"../Button/Button\";\r\n\r\n// &#10004;\r\n// maybe you can use a ternary operator on the whole thing to see if\r\n// the user clicked the update button or not and create a new state element\r\n// called isUpdating\r\n\r\nconst Task = ({\r\n  tasks,\r\n  deleteTask,\r\n  editTask,\r\n  taskComplete,\r\n  updateTask,\r\n  saveTask,\r\n  value,\r\n  taskType,\r\n  onTypeChange,\r\n  taskTime,\r\n  taskPeriod,\r\n  durationType,\r\n  taskDurationType,\r\n  error,\r\n  cancelEdit\r\n}) => (\r\n  <div className=\"tasks\">\r\n    {error ? (\r\n      <div>\r\n        <p className=\"error\">{error}</p>\r\n      </div>\r\n    ) : (\r\n      \"\"\r\n    )}\r\n    {tasks.map(item => (\r\n      <div key={item.taskID} className=\"task-item\">\r\n        {!item.isUpdating ? (\r\n          <Button\r\n            className={`checkbox ${item.isComplete === true ? \"complete\" : \"\"}`}\r\n            onClick={() => taskComplete(item)}\r\n          ></Button>\r\n        ) : (\r\n          <div></div>\r\n        )}\r\n        {item.isUpdating ? (\r\n          <input type=\"text\" value={value} onChange={updateTask} />\r\n        ) : (\r\n          <h3 className={`${item.isComplete ? \"task-complete\" : \"\"}`}>\r\n            {item.task}\r\n          </h3>\r\n        )}\r\n\r\n        {item.isUpdating ? (\r\n          <form>\r\n            <input\r\n              type=\"text\"\r\n              maxLength=\"3\"\r\n              onChange={taskTime}\r\n              value={taskPeriod}\r\n            />\r\n            <select onChange={taskDurationType} value={durationType}>\r\n              <option disable=\"true\">-time-</option>\r\n              <option value=\"min\">min</option>\r\n              <option value=\"hr\">hr</option>\r\n            </select>\r\n          </form>\r\n        ) : (\r\n          <p className={`${item.isComplete ? \"task-complete\" : \"\"}`}>\r\n            {item.duration}\r\n          </p>\r\n        )}\r\n\r\n        {item.isUpdating ? (\r\n          <select value={taskType} onChange={onTypeChange}>\r\n            <option disable=\"true\">-type-</option>\r\n            <option value=\"personal\">personal</option>\r\n            <option value=\"work\">work</option>\r\n          </select>\r\n        ) : (\r\n          <p\r\n            className={`task-type ${\r\n              item.type === \"work\" ? \"work-task\" : \"personal-task\"\r\n            }`}\r\n          >\r\n            {item.type}\r\n          </p>\r\n        )}\r\n\r\n        {item.isUpdating ? (\r\n          <Button\r\n            // onClick={this.addTask}\r\n            className={`task-type task-update`}\r\n            onClick={() =>\r\n              saveTask(item, value, taskType, durationType, taskPeriod)\r\n            }\r\n          >\r\n            Save\r\n          </Button>\r\n        ) : item.isComplete ? (\r\n          \"\"\r\n        ) : (\r\n          <Button\r\n            // onClick={this.addTask}\r\n            className={`task-type task-update`}\r\n            onClick={() => editTask(item)}\r\n          >\r\n            Update\r\n          </Button>\r\n        )}\r\n        {!item.isUpdating ? (\r\n          <Button\r\n            // onClick={this.addTask}\r\n            className={`task-type task-delete`}\r\n            onClick={() => deleteTask(item.taskID)}\r\n          >\r\n            Delete\r\n          </Button>\r\n        ) : (\r\n          <Button\r\n            // onClick={this.addTask}\r\n            className={`task-type task-delete`}\r\n            onClick={() => cancelEdit(item.taskID)}\r\n          >\r\n            Cancel\r\n          </Button>\r\n        )}\r\n      </div>\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default Task;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Sort from \"./components/Sort/Sort\";\nimport Button from \"./components/Button/Button\";\nimport Task from \"./components/Task/Task\";\n\n// default array of tasks\nconst tasks = [\n  {\n    task: \"Shower\",\n    duration: \"10 min\",\n    type: \"personal\",\n    taskID: 0,\n    isComplete: false,\n    isUpdating: false\n  },\n  {\n    task: \"Breakfast\",\n    duration: \"15 min\",\n    type: \"personal\",\n    taskID: 1,\n    isComplete: false,\n    isUpdating: false\n  },\n  {\n    task: \"Work on Project\",\n    duration: \"1 hr\",\n    type: \"work\",\n    taskID: 2,\n    isComplete: false,\n    isUpdating: false\n  }\n];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tasks,\n      updatedTask: \"\",\n      taskType: \"\",\n      taskPeriod: \"\",\n      durationType: \"\",\n      error: \"\"\n    };\n\n    this.deleteTask = this.deleteTask.bind(this);\n    this.addTask = this.addTask.bind(this);\n    this.editTask = this.editTask.bind(this);\n    this.taskComplete = this.taskComplete.bind(this);\n    this.updateTask = this.updateTask.bind(this);\n    this.saveTask = this.saveTask.bind(this);\n    this.onTypeChange = this.onTypeChange.bind(this);\n    this.taskTime = this.taskTime.bind(this);\n    this.taskDurationType = this.taskDurationType.bind(this);\n    this.cancelEdit = this.cancelEdit.bind(this);\n  }\n\n  // locate the current task.id and remove the task from the tasks list accordingly\n  deleteTask(id) {\n    this.setState(() => {\n      const filterTasks = item => item.taskID !== id;\n      const updatedTasks = this.state.tasks.filter(filterTasks);\n\n      return {\n        tasks: updatedTasks\n      };\n    });\n  }\n\n  // initializes the updating state of a task\n  editTask(task) {\n    this.setState(prevState => {\n      const { tasks, error } = prevState;\n      const errorCheck = error !== \"\" ? error : \"\";\n      if (errorCheck === \"\") {\n        tasks.forEach(element => {\n          element.isUpdating = false;\n        });\n        task.isUpdating = true;\n      } else {\n        alert(\"Please fix current issues before proceeding!\");\n      }\n      const editedTask = tasks => (tasks.taskID === task.taskID ? task : tasks);\n      const updatedTasks = this.state.tasks.filter(editedTask);\n      return {\n        tasks: updatedTasks,\n        error: errorCheck,\n        updatedTask: \"\",\n        taskType: \"\",\n        taskPeriod: \"\",\n        taskDuration: \"\"\n      };\n    });\n  }\n\n  // cancel edit of selected task item\n  cancelEdit(id) {\n    this.setState(prevState => {\n      const { tasks } = prevState;\n      tasks[id].isUpdating = false;\n      return {\n        tasks: tasks,\n        error: \"\",\n        updatedTask: \"\",\n        taskType: \"\",\n        taskPeriod: \"\"\n      };\n    });\n  }\n\n  // appends a new task to the current list of tasks with default task information\n  addTask(curTasks) {\n    // take tasks length and add 1 to the id\n    this.setState(prevState => {\n      const { tasks } = prevState;\n      const newTask = {\n        task: \"---new task---\",\n        duration: \"0 min\",\n        type: \"personal\",\n        taskID: tasks.length,\n        isComplete: false,\n        isUpdating: false\n      };\n\n      const combineTasks = [...curTasks, newTask];\n      return {\n        tasks: combineTasks\n      };\n    });\n  }\n\n  // sets the tasks isComplete property to true to indicate completion of the task\n  taskComplete(task) {\n    this.setState(prevState => {\n      const { tasks } = prevState;\n      task.isComplete = tasks[task.taskID].isComplete ? false : true;\n      const udpatedTask = item => (item.id === task.id ? task : item);\n      const updatedList = this.state.tasks.filter(udpatedTask);\n      return {\n        tasks: updatedList\n      };\n    });\n  }\n\n  // Editting methods\n\n  // sets the task title\n  updateTask(e) {\n    this.setState({ updatedTask: e.target.value });\n  }\n\n  // listens for changes regarding the task type(personal/work)\n  onTypeChange(e) {\n    this.setState({ taskType: e.target.value });\n  }\n\n  //  sets the number for setting the task duration\n  taskTime(e) {\n    this.setState({ taskPeriod: e.target.value });\n  }\n\n  // sets the taskDurationType (\"min/hr\")\n  taskDurationType(e) {\n    this.setState({ durationType: e.target.value });\n  }\n\n  // saves the changes the user has made or reverts to original task information if no changes are made\n  saveTask(task) {\n    this.setState(prevState => {\n      const {\n        tasks,\n        taskType,\n        updatedTask,\n        durationType,\n        taskPeriod,\n        error\n      } = prevState;\n\n      // setting the task duration\n      // validation to see if the user entered a numeric time duration\n      const errorCheck =\n        taskPeriod === \"\"\n          ? \"\"\n          : !Number.isInteger(parseInt(taskPeriod))\n          ? \"Task Duration must be numeric!\"\n          : error !== \"\"\n          ? error\n          : \"\";\n      // set the durationType to default \"min\" if nothing selected\n      const typeCheck = durationType === \"\" ? \"min\" : durationType;\n      task.duration =\n        taskPeriod === \"\"\n          ? task.duration\n          : !Number.isInteger(parseInt(taskPeriod))\n          ? task.duration\n          : `${taskPeriod + \" \" + typeCheck}`;\n\n      // setting the task title\n      task.task =\n        errorCheck !== \"\"\n          ? tasks[task.taskID].task\n          : task.updatedTask === \"\"\n          ? task.task\n          : updatedTask;\n      // setting the task type (work/personal)\n      task.type = taskType === \"\" ? task.type : taskType;\n      // filter through the tasks to locate the current task you are editting and filter it out with the editted version\n      const filterTask = item => (item.id === task.id ? task : item);\n      const updatedTasks = this.state.tasks.filter(filterTask);\n      // if there were any errors found, the update state will remain for the user to fix\n      task.isUpdating = errorCheck === \"\" ? false : true;\n      return {\n        tasks: updatedTasks,\n        error: errorCheck\n      };\n    });\n  }\n  render() {\n    const {\n      tasks,\n      updatedTask,\n      taskType,\n      taskDuration,\n      durationType,\n      taskPeriod,\n      error\n    } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"task-wrapper\">\n          <div className=\"header\">\n            <h1 className=\"title\">Today's Tasks</h1>\n            <Button onClick={() => this.addTask(tasks)} className=\"add-task\">\n              Add Task\n            </Button>\n          </div>\n\n          <Task\n            tasks={tasks}\n            deleteTask={this.deleteTask}\n            editTask={this.editTask}\n            taskComplete={this.taskComplete}\n            updateTask={this.updateTask}\n            saveTask={this.saveTask}\n            value={updatedTask}\n            onTypeChange={this.onTypeChange}\n            select={taskType}\n            taskDuration={taskDuration}\n            taskDurationType={this.taskDurationType}\n            taskTime={this.taskTime}\n            durationType={durationType}\n            taskPeriod={taskPeriod}\n            error={error}\n            cancelEdit={this.cancelEdit}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nif (module.hot) {\n  module.hot.accept();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}